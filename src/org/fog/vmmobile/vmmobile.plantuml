@startuml

title __VMMOBILE's Class Diagram__\n

  namespace  {
    namespace rg.fog.vmmobile {
      class org.fog.vmmobile.AppExemplo2 {
          {static} ~ CLOUD : boolean
          {static} ~ EEG_TRANSMISSION_TIME : double
          {static} ~ numOfDepts : int
          {static} ~ numOfMobilesPerDept : int
          {static} - apDevices : List<ApDevice>
          {static} - appIdList : List<String>
          {static} - applicationList : List<Application>
          {static} - brokerList : List<FogBroker>
          {static} - coordDevices : Coordinate
          {static} - latencyBetweenCloudlets : int
          {static} - maxBandwidth : int
          {static} - maxSmartThings : int
          {static} - migPointPolicy : int
          {static} - migStrategyPolicy : int
          {static} - migrationAble : boolean
          {static} - mobilityPrecitionError : int
          {static} - policyReplicaVM : int
          {static} - positionApPolicy : int
          {static} - positionScPolicy : int
          {static} - rand : Random
          {static} - seed : int
          {static} - serverCloudlets : List<FogDevice>
          {static} - smartThings : List<MobileDevice>
          {static} - stepPolicy : int
          {static} - travelPredicTimeForST : int
          {static} + addServerCloudlet()
          {static} + addServerCloudlet()
          {static} + addSmartThing()
          {static} + getApDevices()
          {static} + getAppIdList()
          {static} + getApplicationList()
          {static} + getBrokerList()
          {static} + getCoordDevices()
          {static} + getLatencyBetweenCloudlets()
          {static} + getMaxBandwidth()
          {static} + getMaxSmartThings()
          {static} + getMigPointPolicy()
          {static} + getMigStrategyPolicy()
          {static} + getMobilityPrecitionError()
          {static} + getPolicyReplicaVM()
          {static} + getPositionApPolicy()
          {static} + getPositionScPolicy()
          {static} + getRand()
          {static} + getSeed()
          {static} + getServerCloudlets()
          {static} + getSmartThings()
          {static} + getStepPolicy()
          {static} + getTravelPredicTimeForST()
          {static} + isMigrationAble()
          {static} + main()
          {static} + setApDevices()
          {static} + setAppIdList()
          {static} + setApplicationList()
          {static} + setBrokerList()
          {static} + setCoordDevices()
          {static} + setLatencyBetweenCloudlets()
          {static} + setMaxBandwidth()
          {static} + setMaxSmartThings()
          {static} + setMigPointPolicy()
          {static} + setMigStrategyPolicy()
          {static} + setMigrationAble()
          {static} + setMobilityPredictionError()
          {static} + setPolicyReplicaVM()
          {static} + setPositionApPolicy()
          {static} + setPositionScPolicy()
          {static} + setRand()
          {static} + setSeed()
          {static} + setServerCloudlets()
          {static} + setSmartThings()
          {static} + setStepPolicy()
          {static} + setTravelPredicTimeForST()
          {static} - addApDevicesFixed()
          {static} - addApDevicesRandon()
          {static} - createApplication()
          {static} - createApplication()
          {static} - createServerCloudletsNetwork()
          {static} - readDevicePath()
          {static} - readDevicePathOrder()
          {static} - readMoblityData()
          {static} - saveMobility()
      }
    }
  }
  

  namespace  {
    namespace rg.fog.vmmobile {
      class org.fog.vmmobile.AppExemplo3 {
      }
    }
  }
  

  namespace  {
    namespace rg.fog.vmmobile {
      class org.fog.vmmobile.LogMobile {
          {static} + DEBUG : int
          {static} + ENABLED : boolean
          {static} + ERROR : int
          {static} + LOG_LEVEL : int
          {static} - df : DecimalFormat
          {static} + debug()
          {static} + setLogLevel()
      }
    }
  }
  

  namespace  {
    namespace rg.fog.vmmobile {
      class org.fog.vmmobile.NetworkExample4 {
          {static} - cloudletList : List<Cloudlet>
          {static} - vmlist : List<Vm>
          {static} + main()
          {static} - createBroker()
          {static} - createDatacenter()
          {static} - printCloudletList()
      }
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
